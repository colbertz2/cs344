#!/bin/bash

#######################################################
# TITLE: matrix                                       #
# AUTHOR: Zach Colbert                                #
# EMAIL: colbertz@oregonstate.edu                     #
# DESCRIPTION: Tools for manipulating and calulating  #
#              statistics on integer matrices.        #
# NOTES: CS 344, W 2020 (online)                      #
#######################################################

####################
# GLOBAL VARIABLES #
####################

# Global return value of functions
_RET=0

########################
# FUNCTION DEFINITIONS #
########################

# Test function prints stuff to console
test() {
  echo "Hello, world!"
  exit 0
}

# Alias for usage()
help() {
  _usage
}

# Prints usage info to console (when you've fucked up)
_usage() {
  echo -e "Usage: $0 \033[4mOPERATION\033[0m [\033[4mARGUMENT\033[0m] ..." 1>&2
  echo -e "\nPossible operations are:" 1>&2
  echo -e "  dims \t\tPrint the dimensions of the matrix (rows cols)" 1>&2
  echo -e "  transpose \tTranspose matrix elements" 1>&2
  echo -e "  mean \t\tColumn-wise mean of matrix elements" 1>&2
  echo -e "  add \t\tAdd two m x n matrices" 1>&2
  echo -e "  multiply \tMultiply an (m x n) and a (n x p) matrix" 1>&2
  echo -e "  test \t\tPrints 'Hello, world!'" 1>&2
  echo -e "  help \t\tPrints this message" 1>&2
  echo 1>&2
  exit 1
}

_usage1() {
  echo -e "Usage: $0 $1 [\033[4mMATRIX\033[0m]" 1>&2
  echo 1>&2
  exit 1
}

_usage2() {
  echo -e "Usage: $0 $1 \033[4mMATRIX_LEFT\033[0m \033[4mMATRIX_RIGHT\033[0m" 1>&2
  echo 1>&2
  exit 1
}

# Check if file exists, print an error if it doesn't
_fileExists() {
  if [ ! -f $1 ]; then
    echo "$1: No such file" 1>&2
    echo 1>&2
    exit 1
  fi
}

# Check if file is readable
_fileIsReadable() {
  if [ ! -r $1 ]; then
    echo "$1: File is unreadable" 1>&2
    echo 1>&2
    exit 1
  fi
}

# Count the rows in a matrix file
_countRows() {
  # Init counter
  i=0

  # Loop reading all lines in file $1
  while read line; do
    ((i++))
  done < $1

  _RET=$i
}

# Count the columns in the first row of file $1
_countCols() {
  # Init counter
  i=0

  # Read a single line from the top of the file
  read line < $1

  # Loop through each element of the line
  for el in $line; do
    ((i++))
  done

  _RET=$i
}

# Returns dimensions of the given matrix (rows cols)
dims() {
  tmp="$$.tmp"
  trap "rm -f $tmp; echo 'Signal trap: Cleaning up and exiting' 1>&2; exit 1" INT HUP TERM
  
  # Inspired by:
  # https://superuser.com/questions/747884/how-to-write-a-script-that-accepts-input-from-a-file-or-from-stdin
  if [ $# -gt 1 ]; then _usage1 "dims"; fi
  [ $# -eq 1 ] && _fileExists "$1" && _fileIsReadable "$1" && cat $1 > $tmp || cat - > $tmp

  _countRows $tmp
  printf "%d " $_RET

  _countCols $tmp
  printf "%d\n" $_RET

  rm -f $tmp

  exit 0
}

# Transposes a given matrix along the diagonal
transpose() {
  infile="$$-in.tmp"
  temp="$$.tmp"
  tempCol="$$-col.tmp"
  trap "rm -f $infile $temp $tempCol; echo 'Signal trap: Cleaning up and exiting' 1>&2; exit 1" INT HUP TERM

  if [ $# -gt 1 ]; then _usage1 "transpose"; fi
  [ $# -eq 1 ] && _fileExists "$1" && _fileIsReadable "$1" && cat $1 > $infile || cat - > $infile

  # Get matrix dimensions
  _countRows $infile
  inRows=$_RET

  _countCols $infile
  inCols=$_RET
  
  for c in `seq 1 $inCols`; do
    # Cut the column and save it to temp file
    cut -f $c $infile > $tempCol
    
    #echo "=== COLUMN $c ==="
    #cat $tempCol

    # Write each element in column to a tab-delim row in temp file
    count=1
    while read el; do
      #echo "Element-wise: "
      #printf "%d" $el
      printf "%d" $el >> $temp
      if [ $count -lt $inRows ]; then
        #printf "\t"
        printf "\t" >> $temp
      fi
      count=`expr $count + 1`
    done < $tempCol

    # Newline at end of each row
    #printf "\n"
    printf "\n" >> $temp
  done

  # echo new matrix
  cat $temp

  # Clean up
  rm -f $infile $temp $tempCol
  exit 0
}

# Returns the column-wise mean of a given matrix as a row vector
mean() {
  infile="$$-in.tmp"
  temp="$$.tmp"
  outfile="$$-out.tmp"
  trap "rm -f $infile $temp $outfile; echo 'Signal trap: Cleaning up and exiting' 1>&2; exit 1" INT HUP TERM
  [ $# -ge 1 ] && _fileExists "$1" && _fileIsReadable "$1" && cat $1 > $infile || cat - > $infile

  # Get matrix dimensions
  _countRows $infile
  inr=$_RET

  _countCols $infile
  inc=$_RET

  for c in `seq 1 $inc`; do
    # Cut the column and save it to temp file
    cut -f $c $infile > $temp

    # Sum all the elements of the column
    sum=0
    count=0
    while read el; do
      #echo $el
      sum=`expr $sum + $el`
      count=`expr $count + 1`
    done < $temp
    
    #echo "Sum: $sum"
    #echo "Count: $count"

    # Divide by number of elements 
    avg=`expr \( $sum + \( $count / 2 \) \* \( \( $sum \> 0 \) \* 2 - 1 \) \) / $count`

    # Write result to temp file
    echo $avg >> $outfile
  done

  # Transpose results from temp file to a row
  count=1
  while read el; do
    printf "%d" $el
    if [ $count -lt $inc ]; then
      printf "\t"
    fi
    count=`expr $count + 1`
  done < $outfile
  printf "\n"

  # Clean up
  rm -f $infile $temp $outfile
  exit 0
}

# Add two matrices (of the same dimensions) together
add() {
  # Require 2 arguments to this function
  if [ $# -lt 2 ]; then
    _usage2 "add"
  fi

  # Check files exist and are readable
  _fileExists $1
  _fileExists $2
  _fileIsReadable $1
  _fileIsReadable $2

  # Check dimensions of each input matrix
  _countRows $1
  inr1=$_RET
  _countCols $1
  inc1=$_RET

  _countRows $2
  inr2=$_RET
  _countCols $2
  inc2=$_RET

  # Require matrix dims match
  if [ $inr1 -ne $inr2 ] || [ $inc1 -ne $inc2 ]; then
    echo "Fatal: Matrix dimensions do not match" 1>&2
    echo 1>&2
    exit 1
  fi

  # Set up temp file and signal trap
  tmp="$$.tmp"
  tmpR1="$$-row1.tmp"
  tmpR2="$$-row2.tmp"
  trap "rm -f $tmp $tmpR1 $tmpR2; echo 'Signal trap: Cleaning up and exiting' 1>&2; exit 1" INT HUP TERM
  
  # For each row of the two input files
  # (Redirects file $1 to stdin, and file $2 to file descriptor 3)
  while read r1 && read r2 <&3; do
    # Write rows to respective temp files
    printf "%s\n" $r1 > $tmpR1
    printf "%s\n" $r2 > $tmpR2
    
    # For each column in the row
    for c in `seq 1 $inc1`; do
      # Cut an element from each file
      el1=`cut -f $c $tmpR1`
      el2=`cut -f $c $tmpR2`

      # Sum elements
      sum=`expr $el1 + $el2`

      # Print sum to results file
      printf "%d" $sum >> $tmp

      # Print appropriate whitespace
      if [ $c -lt $inc1 ]; then
        printf "\t" >> $tmp
      fi
    done
    
    # Newline at end of each row
    printf "\n" >> $tmp

  done < $1 3< $2

  # Print results to stdout
  cat $tmp

  # Clean up
  rm -f $tmp $tmpR1 $tmpR2

  exit 0
}

# Multiply two matrices (of the same dimensions)
multiply() {
  # Require 2 arguments to this function
  if [ $# -lt 2 ]; then
    _usage2 "multiply"
  fi

  # Check files exist and are readable
  _fileExists $1
  _fileExists $2
  _fileIsReadable $1
  _fileIsReadable $2

  # Check dimensions of each input matrix
  _countRows $1
  inr1=$_RET
  _countCols $1
  inc1=$_RET
  
  _countRows $2
  inr2=$_RET
  _countCols $2
  inc2=$_RET

  # Require matrix dims (M x N) * (N x P)
  if [ $inc1 -ne $inr2 ]; then
    echo "Fatal: Matrix dimensions do not match" 1>&2
    echo 1>&2
    exit 1
  fi

  # Set up temp files and signal trap
  tmp="$$.tmp"
  tmpA="$$-a.tmp"
  tmpB="$$-b.tmp"
  trap "rm -f $tmp $tmpA $tmpB; echo 'Signal trap: Cleaning up and exiting' 1>&2; exit 1" INT HUP TERM

  # Let first input be A
  # Let second input be B
  # For each row in A
  rowCount=0
  while read rowA; do
    rowCount=`expr $rowCount + 1`

    # Save the row to temp file a and transpose
    printf "%s\n" $rowA > $tmpA
    $0 transpose $tmpA > $tmpB
    mv $tmpB $tmpA

    # For each column in B
    for c in `seq 1 $inc2`; do
      # Cut the corresponding column from B
      colB=`cut -f $c $2`

      # Write the column to temp file b
      printf "%s\n" $colB > $tmpB

      # Use stdin and file descriptor 3 to read from tmpA and tmpB simultaneously
      # For each element in temp files
      result=0
      while read el1 && read el2 <&3; do
        echo "Element multiplication loop" 1>&2
        echo "$el1 * $el2" 1>&2
        # Multiply elements together and add to result
        result=`expr \( $el1 \* $el2 \) + $result`
      done < $tmpA 3< $tmpB
      echo "Post loop" 1>&2
      # Result makes one element in the final array
      printf "%d" $result >> $tmp

      # Print appropriate whitespace
      if [ $c -lt $inc2 ]; then
        printf "\t" >> $tmp
      fi
    done

    # Newline at end of each row
    printf "\n" >> $tmp

  done < $1

  # Print resulting array to stdout
  cat $tmp

  # Clean up
  rm -f $tmp $tmpA $tmpB

  exit 0
}


################
# MAIN ROUTINE #
################

# If no operation is provided, print usage info
if [ $# -eq 0 ]; then
  _usage
fi

# Runs the function passed in $1 with remaining arguments
$1 "${@:2}"

